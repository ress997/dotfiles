[[plugins]]
repo = 'Shougo/dein.vim'

# Library {{{

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vital.vim'

# }}}
# 機能拡張 {{{

[[plugins]] # ファイルタイプ自動切り替え
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]] # Auto Close (括弧)
repo = 'jiangmiao/auto-pairs'
on_event = 'InsertEnter'
hook_post_source = 'call AutoPairsTryInit()'

[[plugins]] # Auto save
repo ='907th/vim-auto-save'
on_path = '.*'
hook_source = '''
	let g:auto_save = 1                 " Auto save 有効化
	let g:auto_save_in_insert_mode = 0  " インサートモードで自動保存 OFF
	let g:auto_save_silent = 1          " メッセージを表示しない
'''
hook_post_source = 'call AutoSave()'

[[plugins]] # 対応括弧をハイライト
repo = 'itchyny/vim-parenmatch'
hook_add = 'let g:loaded_matchparen = 1'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_path = '.*'
hook_add = '''
	" キーマップを無効にする
	let g:gitgutter_map_keys = 0
'''

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'

[[plugins]] # 選択範囲を記号やタグで囲んだり外したりできる
repo = 'tpope/vim-surround'
on_path = '.*'

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_event = 'InsertEnter'
hook_source = '''
	let g:user_emmet_mode = 'i'
	let g:user_emmet_leader_key = '<C-E>'
	let g:use_emmet_complete_tag = 1
	let g:user_emmet_settings = {'variables':{'lang':"ja"}}
'''

## Status line {{{

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
	" TODO: 整理&最適化

	let g:lightline = {}
	let g:lightline.colorscheme = 'hybrid'

	" let g:lightline.active = {}
	" let g:lightline.active.lest = [['mode', 'paste'], ['readonly', 'filename', 'modified']]
	" let g:lightline.active.right = [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]

	let g:lightline.inactive = {}
	let g:lightline.inactive.left = [['filename']]
	let g:lightline.inactive.right = [['lineinfo'], ['percent']]

'''

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'
depends = 'lightline.vim'

## }}}
## search {{{

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>(incsearch-'
hook_add = '''
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # 曖昧検索
repo = 'haya14busa/incsearch-fuzzy.vim'
depends = 'incsearch.vim'
on_map = '<Plug>(incsearch-fuzzy-'
hook_add = '''
	map z/ <Plug>(incsearch-fuzzy-/)
	map z? <Plug>(incsearch-fuzzy-?)
	map zg/ <Plug>(incsearch-fuzzy-stay)
'''

## }}}
## NERD Tree {{{

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
	" 不可視ファイルを表示する
	let g:NERDTreeShowHidden = 1
	" 除外対象指定
	let g:NERDTreeIgnore = ['.git$', '.(tgz|gz|zip)$']
	" ブックマークを初期表示
	let g:NERDTreeShowBookmarks = 1

	let s:cache_home = empty($XDG_CACHE_HOME) ? expand('$HOME/.cache') : $XDG_CACHE_HOME
	let s:nerdtree_dir = s:cache_home . '/nerdtree'
	let g:NERDTreeBookmarksFile = s:nerdtree_dir . '/Bookmarks'
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
deoplete = 'nerdtree'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
deoplete = 'nerdtree'
# TODO: 起動しなくなるのでやり方を調べてみる
# on_cmd = ['NERDTreeTabsOpen', 'NERDTreeTabsClose', 'NERDTreeTabsToggle', 'NERDTreeMirrorOpen', 'NERDTreeMirrorToggle']
hook_add = '''
	nnoremap <silent> tf :NERDTreeMirrorToggle<CR>
'''

## }}}
## Open Browser {{{

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
on_map = '<Plug>(openbrowser-'
hook_add = '''
	let g:openbrowser_menu_lang = 'ja'
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']
hook_add = '''
	nnoremap go :<C-u>OpenGithubFile<CR>
	xnoremap go :OpenGithubFile<CR>
'''

## }}}
# }}}
# Command {{{

[[plugins]] # dein.vim command
repo = 'haya14busa/dein-command.vim'
depends = 'dein.vim'
on_cmd = 'Dein'

[[plugins]] # Git
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']

[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'

[[plugins]] # Preview
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'

[[plugins]] # Codic
repo = 'yasuharu519/vim-codic'
if = 'exists("$CODIC_ACCESS_TOKEN")'
on_cmd = 'VimCodic'
hook_source = '''
	let g:vim_codic_access_token = $CODIC_ACCESS_TOKEN
'''

# }}}
# Lang {{{

[[plugins]] # Docker
repo = 'ekalinin/Dockerfile.vim'

[[plugins]] # Golang
repo = 'fatih/vim-go'
if = 'executable("go")'
on_cmd = ['GoInstallBinaries', 'GoUpdateBinaries']
on_ft = 'go'
hook_source = '''
	let g:go_fmt_command = 'goimports'
'''

[[plugins]] # Markdown (GitHub Flavored Markdown)
repo = 'rhysd/vim-gfm-syntax'

[[plugins]] # npm
repo = 'rhysd/npm-filetypes.vim'

[[plugins]] # Swift
repo = '39e/vim-swift'

[[plugins]] # TMUX
repo = 'tmux-plugins/vim-tmux'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'

[[plugins]] # zsh - zplug
repo = 'zplug/vim-zplug'


## Web系 {{{

[[plugins]] # amber
repo = 'burner/amber.vim'

[[plugins]] # CoffeeScript
repo = 'kchmck/vim-coffee-script'

[[plugins]] # css3
repo = 'hail2u/vim-css3-syntax'

[[plugins]] # Haml
repo  = 'tpope/vim-haml'

[[plugins]] # Html5
repo  = 'othree/html5.vim'

[[plugins]] # JavaScript
repo = 'jelera/vim-javascript-syntax'

[[plugins]] # TypeScript
repo = 'leafgarland/typescript-vim'

## }}}
## Vim {{{

[[plugins]] # Vim
repo = 'vim-jp/syntax-vim-ex'

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
	set helplang=ja,en
'''

## }}}
# }}}
# Colors {{{

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'

# }}}
