[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
	if has('mac') && executable('osascript')
		let g:dein#enable_notification = 1
	endif
'''

# Library {{{

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vital.vim'

# }}}

[[plugins]] # ファイルタイプ自動切り替え
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
depends = ['context_filetype.vim']
on_i = 1
hook_source = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#enable_smart_case = 1

	" <TAB>: completion.
	imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
	function! s:check_back_space() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
	endfunction

	" <S-TAB>: completion back.
	inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

# NERDTree {{{

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
	" 不可視ファイルを表示する
	let g:NERDTreeShowHidden = 1
	" 除外対象指定
	let g:NERDTreeIgnore = ['.git$','.(tgz|gz|zip)$']
	" ブックマークを初期表示
	let g:NERDTreeShowBookmarks = 1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
deoplete = ['nerdtree']

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
deoplete = ['nerdtree']
hook_add = '''
	" ファイルが指定されていなければNERD treeを有効にする
	if argc() == 0
		let g:nerdtree_tabs_open_on_console_startup = 1
	end
'''

# }}}

[[plugins]] # Auto Close (括弧)
repo = 'jiangmiao/auto-pairs'
on_i = 1
hook_post_source = 'call AutoPairsTryInit()'

[[plugins]] # Auto save
repo ='907th/vim-auto-save'
on_path = '.*'
hook_source = '''
	let g:auto_save = 1                 " Auto save 有効化
	let g:auto_save_in_insert_mode = 0  " インサートモードで自動保存 OFF
	let g:auto_save_silent = 1          " メッセージを表示しない
'''
hook_post_source = 'call AutoSave()'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_path = '.*'
hook_source = '''
	let g:gitgutter_sign_added = '✚'
	let g:gitgutter_sign_modified = '➜'
	let g:gitgutter_sign_removed = '✘'
'''

[[plugins]] # Status line
repo = 'itchyny/lightline.vim'
on_event = ['VimEnter']
hook_source = '''
	let g:lightline = {'colorscheme': 'wombat'}
'''
hook_post_source = 'call lightline#colorscheme()'

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'

[[plugins]] # 選択範囲を記号やタグで囲んだり外したりできる
repo = 'tpope/vim-surround'

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_i = 1
hook_source = '''
	let g:user_emmet_mode = 'i'
	let g:user_emmet_leader_key='<C-E>'
	let g:use_emmet_complete_tag = 1
	let g:user_emmet_settings = {'variables': {'lang': "ja"}}
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
	let g:openbrowser_menu_lang = 'ja'
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = ['open-browser.vim']
on_cmd = ['OpenGithubFile','OpenGithubIssue','OpenGithubPullReq']
hook_add = '''
	nnoremap go :<C-u>OpenGithubFile<CR>
	xnoremap go :OpenGithubFile<CR>
'''

# Lang {{{
## Golang {{{

[[plugins]]
repo = 'fatih/vim-go'
if = 'executable("go")'
on_ft = ['go']
hook_source = '''
	let g:go_fmt_command = 'goimports'
'''

[[plugins]]
repo = 'zchee/deoplete-go'
depends = ['deoplete.nvim']
on_ft = ['go']
build = 'make'
hook_source = '''
	let g:deoplete#sources#go#use_cache = 1
	let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
	let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

## }}}
## HTML {{{

[[plugins]] # Haml
repo  = 'tpope/vim-haml'

[[plugins]] # Html5
repo  = 'othree/html5.vim'

## }}}
## css {{{

[[plugins]] # css3
repo = 'hail2u/vim-css3-syntax'

## }}}
## JavaScript {{{

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

[[plugins]] # TypeScript
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

## }}}
## Markdown {{{

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
	" 自動で折りたたまないようにする
	let g:vim_markdown_folding_disabled = 1
'''

[[plugins]] # Preview
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_cmd = ['PrevimOpen']

## }}}
## Vim {{{

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
on_ft = ['vim']

[[plugins]]
repo = 'Shougo/neco-vim'
depends = ['deoplete.nvim']
on_ft = ['vim']

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'

## }}}

[[plugins]] # amber
repo = 'burner/amber.vim'

[[plugins]] # TMUX
repo = 'tmux-plugins/vim-tmux'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'

[[plugins]] # Zsh - 補完
repo = 'zchee/deoplete-zsh'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'zplug/vim-zplug'

# }}}
# Command {{{

[[plugins]] # dein.vim command
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
on_cmd = ['Dein']

[[plugins]] # Git
repo = 'cohama/agit.vim'
on_cmd = ['Agit','AgitFile']

[[plugins]] # Gist
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']

[[plugins]] # Codic
repo = 'yasuharu519/vim-codic'
if = 'exists("$CODIC_ACCESS_TOKEN")'
on_cmd = ['VimCodic']
hook_source = '''
	let g:vim_codic_access_token = $CODIC_ACCESS_TOKEN
'''

[[plugins]] # 整形
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign']

# }}}
# Colors {{{

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'
hook_add = '''
	" let g:hybrid_custom_term_colors = 1
	" let g:hybrid_reduced_contrast = 1
'''

[[plugins]] # material
repo = 'jdkanani/vim-material-theme'

[[plugins]] # molokai
repo = 'tomasr/molokai'
hook_add = '''
	" let g:molokai_original = 1
	" let g:rehash256 = 1
'''

# }}}
# Test {{{

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("nvim")'

# }}}
