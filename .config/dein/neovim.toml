# 補完 {{{

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
depends = 'context_filetype'
on_event = 'InsertEnter'
hook_source = '''
	" <TAB>: completion.
	imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
	function! s:check_back_space() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
	endfunction

	" <S-TAB>: completion back.
	inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

	let g:deoplete#enable_at_startup = 1
	let g:deoplete#enable_ignore_case = 1
	let g:deoplete#enable_smart_case = 1
'''

# TODO: とりあえず入れただけだか何か調べる
# [[plugins]]
# repo = 'Shougo/neoinclude.vim'
# depends = 'deoplete'

[[plugins]]
repo = 'wellle/tmux-complete.vim'
if = 'executable("tmux")'
depends = 'deoplete'
hook_source = '''
	let g:tmuxcomplete#trigger = ''
'''

[[plugins]] # Docker
repo = 'zchee/deoplete-docker'
depends = 'deoplete'
on_ft = 'Dockerfile'

[[plugins]] # Golang
repo = 'zchee/deoplete-go'
if = 'executable("go")'
depends = 'deoplete'
on_ft = 'go'
build = 'make'
hook_source = '''
	let g:deoplete#sources#go#use_cache = 1
	let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
	let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]] # Vim
repo = 'Shougo/neco-vim'
depends = 'deoplete'
on_ft = 'vim'

[[plugins]] # Zsh
repo = 'zchee/deoplete-zsh'
depends = 'deoplete'
on_ft = 'zsh'

# Neo Snippet

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim', 'deoplete.nvim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	xmap <C-k> <Plug>(neosnippet_expand_target)

	" TODO: 後で調べる
	let neosnippet#disable_select_mode_mappings = 0

	let g:neosnippet#snippets_directory = dein#get('neosnippet-snippets').path . '/neosnippets'
'''

# }}}
# Denite {{{

[[plugins]]
repo = 'nixprime/cpsm'
if = 'has("python3")'
build = 'PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
on_cmd = 'Denite'
hook_post_source = '''
	" file_mru
	call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
	call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])

	" file_rec
	if dein#get('cpsm').sourced
		call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
	endif
	if executable('rg')
		call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])
	elseif executable('pt')
		call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
	elseif executable('ag')
		" https://git.io/vPEZA
		call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
	endif

	" grep
	if executable('rg')
		" https://git.io/vPEZP
		call denite#custom#var('grep', 'command', ['rg'])
		call denite#custom#var('grep', 'recursive_opts', [])
		call denite#custom#var('grep', 'final_opts', [])
		call denite#custom#var('grep', 'separator', ['--'])
		call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
	elseif executable('pt')
		call denite#custom#var('grep', 'command', ['pt'])
		call denite#custom#var('grep', 'recursive_opts', [])
		call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case', '--hidden'])
	endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite'
on_event = 'TextYankPost'

# }}}
